// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!

@file:OptIn(UnsafeWasmMemoryApi::class)
import kotlin.wasm.unsafe.*

object Rust {
  public fun test(): Result<Boolean> {
    // <editor-fold defaultstate="collapsed" desc="Generated Bindings Code">
    withScopedMemoryAllocator { allocator -> 
    val ptr = /* RETURN_ADDRESS_ALLOC(size=8, align=4)*/ allocator.allocate(8).address.toInt()
    __wasm_import_test(ptr)
    freeAllComponentModelReallocAllocatedMemory();
    val result = if ((ptr + 0).ptr.loadUByte().toInt()== 0) {
      Result<Boolean>.success(((ptr + 4).ptr.loadUByte().toInt() != 0))
    } else {
      Result<Boolean>.failure(ComponentException((ptr + 4).ptr.loadInt()))
    }
    return result
  }
  // </editor-fold>
}

}

interface RustExports {
  fun test(): Result<Boolean>

}

interface KotlinExports {
  fun test(): Result<Boolean>

}

